SENotes11

be careful of the difference between subtyping and inheritance
eg
    squares and rectanges
        squares are a subtype of rectange, because every square is a rectangle
        rectangles are a subclass of square, because it includes an extra parameter
        
    Everything which is in a subclassing relationship has to have the is-a relationship hold
    _____
    | A |   Subclassing
    |___|   B is able to masquerade as an A
      ^
      |     Subclasses should always hold
    _____
    | B |
    |___|
    
    __________
    | Person |   Subclassing
    |________|   This is a bad example of subclassing
        ^
        |        A person can become a student and stop being a student without stopping being a person
    ___________  Temporal persistence matters
    | Student |  A better schema would be to have people who have a relationship with a school - removing relationships is much easier
    |_________|     than removing attributes 
    
    
       __________
       | Person |   Subclassing
       |________|   This is a reasonable example of inheritance, 
         ^    ^         made as a compromise to allow a TA into the system
         |    |         he can stop being a student or a teacher, while still retaining his other properties.
___________  ___________  
| Student |  | Teacher |  
|_________|  |_________|     
         ^    ^
         |    |
       __________
       |   TA   |  
       |________|  
       
       
       public interface of a class should only contain the set of services which the class is able to export
            no private interfaces should be included

Classes should not send components of themselves through to other classes
    eg
        Map class in java
            contains an internal class called "entry"
            this class can be accessed in many ways by other modules
            
Chaining is indicative of bad code
    eg
        a.getB().getC().getD();
        
Avoid static wherever possible, keep things scoped correctly
    static will allow anything everywhere else to be able to access that element
    
    
methods should be small
large methods should be composed of smaller methods

rule of 3s
    if code is repeated more than 3 times, pull it out into a different method
    
When writing code, this should be the thought process
    create attributes
    write getters
    figured out what the external user should be able to do with those methods
        setters need to be more exacting, eg withdraw() and deposit()
        
        
High level design
    We do not need to reference anything ther than what would be in the public interface
    Attributes should be of an interface type, not a class type.
    Keep attributes as general as possible, you should not specify anything unless needed
    
recognize similar behavior and seperate it out

Low level design in the design document
    we need to have interfaces for all classes
    public and private methods, attributes
        state the types defined
        can be condensed into UML
        describe and justify the choice of data structures
        eg
            if you use a tree map instead of a hash map, you need to be able to state your rationale
            describe any interesting algorithms which you are expecting to use
            provide the inheritance relationship
        
Need to avoid things like how we are implementing the relationship between 2 classes
    just say that there is a relationship
    
Low level design
    need to work through the process until we get it right
    consider all of the alternatives
    
    when the choice is not clear, but the outcome is important,
        you may want to pursue both options simultaneously
        if there is no time to make a prototype of both, kludge and choose one
    
    data structure and algorithm design
        
High level design
    building a set of APIs
        low level design - how can we provide everything that we promised in the API
    isolate as many low-level decisions as possibel so it is easy to make changes
        if we assume that we are going to get things wrong, we will code cautiously and be able to roll back later
        
    
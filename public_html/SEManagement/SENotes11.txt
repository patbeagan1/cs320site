SENotes11

be careful of the difference between subtyping and inheritance
eg
    squares and rectanges
        squares are a subtype of rectange, because every square is a rectangle
        rectangles are a subclass of square, because it includes an extra parameter
        
    Everything which is in a subclassing relationship has to have the is-a relationship hold
    _____
    | A |   Subclassing
    |___|   B is able to masquerade as an A
      ^
      |     Subclasses should always hold
    _____
    | B |
    |___|
    
    __________
    | Person |   Subclassing
    |________|   This is a bad example of subclassing
        ^
        |        A person can become a student and stop being a student without stopping being a person
    ___________  Temporal persistence matters
    | Student |  A better schema would be to have people who have a relationship with a school - removing relationships is much easier
    |_________|     than removing attributes 
    
    
       __________
       | Person |   Subclassing
       |________|   This is a reasonable example of inheritance, 
         ^    ^         made as a compromise to allow a TA into the system
         |    |         he can stop being a student or a teacher, while still retaining his other properties.
___________  ___________  
| Student |  | Teacher |  
|_________|  |_________|     
         ^    ^
         |    |
       __________
       |   TA   |  
       |________|  
       
       
       public interface of a class should only contain the set of services which the class is able to export
            no private interfaces should be included

Classes should not send components of themselves through to other classes
    eg
        Map class in java
            contains an internal class called "entry"
            this class can be accessed in many ways by other modules
            
Chaining is indicative of bad code
    eg
        a.getB().getC().getD();
        
Avoid static wherever possible, keep things scoped correctly
    static will allow anything everywhere else to be able to access that element
    
    
methods should be small
large methods should be composed of smaller methods

rule of 3s
    if code is repeated more than 3 times, pull it out into a different method
    
When writing code, this should be the thought process
    create attributes
    write getters
    figured out what the external user should be able to do with those methods
        setters need to be more exacting, eg withdraw() and deposit()
        